PASSING DATA WORKFLOW USING A FORM

PART 1. In the child component that contains the form, do the following:

    A. Add an onFormSubmit function.
        1. Make sure you place an event argument in the function
        2. You should use e.preventDefault() to prevent the entire page from reloading, unless you want it to reload for some reason.
        3. Pull data from your form using this.refs.REF NAME.value
        4. Put in an if function to tell the function not to fire if the field is blank, that is, if the value.length isn't zero.
            a. Clear any filled form fields by setting the value to "".
            b. Pass the data you just got to the parent, using this.props.((on))FUNCTION NAME THAT WILL BE USED IN PARENT(data)
            c. If there is any other input validation you want to do, such as a regex match, do it before passing the data.

    B. Add an onSubmit property to the form, telling it which function to run.
        1. Put the function in braces, it's not a string like html usually has, since it's really jsx.
        2. Use the this. keyword before the function name
        
    C. Add a "ref" name to the inputs that you intend to pass over to the Parent.
        1. You can also add a ref and className for the form itself
        2. Remember to specify the input type, usually type = "text".



PART 2. In the parent function that contains the state, do the following:

    A. Add a handling function to operate on the data from the form. -
        1. The name of the handling function must be ((handle))FUNCTION NAME FROM 4b: function(data){}
        2. The handling function should now run this.setState{key: value}, drawing the values from the data.

    B. In the JSX, tell the child that retrieves the data what to do with it.
        1. Find the child with the form, give it an ((on))FUNCTION NAME property.
        2. Tell that function to point to {this.((handle))FUNCTION NAME}.
        3. Use "this" because the function isn't defined in the JSX context, but is defined in the Class constructor context.

    C. Set an initial state for the parent with getInitialState function().
        1. Return an object with key value pairs that match up with the handling function in 2B.
        2. This is optional, if you're okay with having them as undefined before the form submit.
    
    D. Inside the render function:
        1. Before the return:
            a. Define new variables set equal to the state using var {var list} = this.state 
            b. This is called destructuring syntax, and it will create several new vars.
        2. Inside the return:
            a. put new properties in the child that's going to display them.
            b. set each property equal to the vars you made before the return.


PART 3. In the child function that's going to display the new state, do the following:

    A. Pull the variables off of the property object before the render function.
        1. You can use {vars} = this.props again to generate new variables in the child.
        2. Make sure that the variable names you're going to use are consistent throughout all classes.

    B. Place the variables where you want them in the render function with {} around them.

  ******************************************************************************************************************************
    Summary: The form has an "on" function, which is defined in the form's JSX above render.
                The "on" function points to an "onSet" function, which isn't really a function, but a prop in the parent
            The parent's "onSet" prop points to a "handle" function, also in the parent.
        The handle function calls setState({key: value}), which changes the parent's state, so it can be passed to other props.
    The render function can then make calls to this.state
    *****************************************************************************************************************************

PART 4. To pass pieces of the web address:
    A. In <Weather.jsx>, to run the search ON something in the web address:
        1. Make a compoenentDidMount function, to run every time the weather page loads.
        2. Pull the location out of the web address by using var location = this.props.location.query.location
        3. Run the handleSearch() function on that location, if the location exists and isn't empty.
        4. Null the address out by setting window.location.hash = "#/", which replaces the location string with a #.
    B. In <Nav.jsx>, to put items INTO the web address:
        1. place a ref attribute on the search bar
        2. Target the ref by making a variable = this.refs.(ref name).value
        3. Encode the location by using encodeURIComponent(target)
        4. Null the search term out by using this.refs.(ref name).value = ""
        5. Modify the web address by setting window.location.hash = "#/?(ENCODED TARGET)=" + "value"


PART 5: To listen for changes after the component is already loaded:
    A. Create a function called componentWillReceiveProps(), let it take in newProps from <Nav.jsx>
    B. Let the location now be newProps.location.query.location
    C. Run handleSearch() on the location, if one exists and isn't empty
    D. Null out the address again with window.location.hash = "#/"
